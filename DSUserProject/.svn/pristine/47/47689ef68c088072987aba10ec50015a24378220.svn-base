//
//  LiveSmallListCell.m
//  JMBaseProject
//
//  Created by 潘传标 on 2019/9/3.
//  Copyright © 2019 liuny. All rights reserved.
//

#import "LiveSmallListCell.h"
#import "LiveRoomModel.h"
@interface LiveSmallListCell()
@property (weak, nonatomic) IBOutlet UIView *backView;

@property (weak, nonatomic) IBOutlet UIImageView *stateIconImageView;
@property (weak, nonatomic) IBOutlet UILabel *stateLabel;
@property (weak, nonatomic) IBOutlet UILabel *titleLabel;
@property (weak, nonatomic) IBOutlet UIImageView *headImageView;
@property (weak, nonatomic) IBOutlet UILabel *nameLabel;
@property (weak, nonatomic) IBOutlet UIImageView *peopleIconImageView;
@property (weak, nonatomic) IBOutlet UIImageView *liveCoverImageView;
@property (weak, nonatomic) IBOutlet UIView *mainView;
@property (weak, nonatomic) IBOutlet UILabel *addressLable;
@property (weak, nonatomic) IBOutlet UILabel *numLable;
@property (nonatomic, weak) CAEmitterLayer *emitterLayer;

@end
@implementation LiveSmallListCell

- (void)awakeFromNib
{
    [super awakeFromNib];
    self.backView.layer.cornerRadius = 5;
    self.backView.layer.masksToBounds = YES;
    self.headImageView.layer.cornerRadius = self.headImageView.mj_w * 0.5;
    self.headImageView.layer.masksToBounds = YES;
}


- (void)setRoomModel:(LiveRoomModel *)roomModel
{
      _roomModel = roomModel;
     switch (self.roomModel.state.integerValue) {
        case 0:
            self.stateLabel.text = @"直播中";
            self.stateIconImageView.image = [UIImage imageNamed:@"home_a06"];
            //在线人数
            self.peopleIconImageView.hidden = NO;
             self.numLable.hidden = NO;
             self.numLable.text = self.roomModel.onlinePeople;
            break;
        case 1:
        case 2:
            self.stateLabel.text = @"离线中";
            self.stateIconImageView.image = [UIImage imageNamed:@"home_a07"];
            //在线人数
            self.peopleIconImageView.hidden = YES;
             self.numLable.hidden  = YES;
            break;
        default:
            break;
    }
    [self.liveCoverImageView sd_setImageWithURL:[JMCommonMethod imageUrlWithPath:self.roomModel.coverImage]];
    self.titleLabel.text = self.roomModel.name;
    [self.headImageView sd_setImageWithURL:[JMCommonMethod imageUrlWithPath:self.roomModel.anchorHead]];
    self.nameLabel.text = self.roomModel.anchorName;
    self.addressLable.text = self.roomModel.city;
    
    [self.emitterLayer setHidden:NO];
    
}

/*
* 粒子动画
*/
- (CAEmitterLayer *)emitterLayer
{
    if (!_emitterLayer) {
        CAEmitterLayer *emitterLayer = [CAEmitterLayer layer];
        // 发射器在xy平面的中心位置
        emitterLayer.emitterPosition = CGPointMake(self.mj_w-38.0, self.mj_h-50);
        // 发射器的尺寸大小
        emitterLayer.emitterSize = CGSizeMake(20, 10);
        // 渲染模式
        emitterLayer.renderMode = kCAEmitterLayerUnordered;
        emitterLayer.emitterMode =kCAEmitterLayerOutline;
        emitterLayer.name                   = @"emitterLayer";
        //        emitterLayer.lifetime = 0.5f;
        //        emitterLayer.
        //        //发射的形状
        //        _emitterLayer.emitterShape = kCAEmitterLayerLine;
        //        //发射的模式
        //        _emitterLayer.emitterMode = kCAEmitterLayerLine;
        // 开启三维效果
        //    _emitterLayer.preservesDepth = YES;
        NSMutableArray *array = [NSMutableArray array];
        // 创建粒子
        for (int i = 0; i<5; i++) {
            // 发射单元
            CAEmitterCell *stepCell = [CAEmitterCell emitterCell];
            // 粒子的创建速率，默认为1/s
            stepCell.birthRate = 3;
            stepCell.name             = @"emitterCell";
            // 粒子存活时间
            stepCell.lifetime = arc4random_uniform(3)  ;
            // 粒子的生存时间容差
            stepCell.lifetimeRange = 1.5;
            // 颜色
            // fire.color=[[UIColor colorWithRed:0.8 green:0.4 blue:0.2 alpha:0.1]CGColor];
            UIImage *image = [UIImage imageNamed:[NSString stringWithFormat:@"effect_icon_0%d", i+1]];
            // 粒子显示的内容
            stepCell.contents = (id)[image CGImage];
            // 粒子的名字
            //            [fire setName:@"step%d", i];
            // 粒子的运动速度
            stepCell.velocity = arc4random_uniform(100) + 10;
            // 粒子速度的容差
            stepCell.velocityRange = 80;
            // 粒子在xy平面的发射角度
            stepCell.emissionLongitude = M_PI+M_PI_2;;
            // 粒子发射角度的容差
            stepCell.emissionRange = M_PI_2/6;
            // 缩放比例
            stepCell.scale = 0.5;
            
            //透明度每过一秒就是减少0.5
            stepCell.alphaSpeed = -0.2;
            
            [array addObject:stepCell];
        }
        
        emitterLayer.emitterCells = array;
        [self.layer addSublayer:emitterLayer];
        _emitterLayer = emitterLayer;
    }
    return _emitterLayer;
}

@end
