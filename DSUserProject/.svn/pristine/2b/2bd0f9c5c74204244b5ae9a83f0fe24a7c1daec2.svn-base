//
//  JMProjectManager.m
//  JMBaseProject
//
//  Created by liuny on 2018/7/14.
//  Copyright © 2018年 liuny. All rights reserved.
//

#import "JMProjectManager.h"
#import "JMAppVersionTool.h"
#import "BindPhoneViewController.h"
#import "LoginViewController.h"
#import "GuideViewController.h"
#import "MLVBLiveRoom.h"
#import "PlayVideoViewController.h"
#import "WebSocketManager.h"
#import "LivePlayViewController.h"
#import "LiveSmallPlayView.h"

static NSString *nameKey = @"LastLoginName";
static NSString *passwordKey = @"LastLoginPassword";

@interface JMProjectManager()
@property (nonatomic, strong) JMAppVersionTool *appVersionTool;
@property (nonatomic, strong) LivePlayViewController *liveVC;
@property (nonatomic, strong) LiveSmallPlayView *smallPlay;
@end


@implementation JMProjectManager
singleton_implementation(JMProjectManager)

@synthesize loginUser=_loginUser;

#pragma mark - 登录用户缓存
-(void)setLoginUser:(JMLoginUserModel *)loginUser{
    if(loginUser){
        _loginUser = loginUser;
        [_loginUser save];
    }else{
        [_loginUser clear];
    }
}

-(JMLoginUserModel *)loginUser{
    if(_loginUser == nil){
        if([JMFileManagerHelper isExistsAtPath:kLoginUserSavePath]){
            _loginUser = [NSKeyedUnarchiver unarchiveObjectWithFile:kLoginUserSavePath];
        }else{
            //游客
            JMLoginUserModel *loginUser =  [JMLoginUserModel new];
            loginUser.sessionId = @"sessionId";
            loginUser.userId = @"254";
            loginUser.nickName = @"游客";
            loginUser.headUrl = @"mine_a06";
            _loginUser = loginUser;
        }
    }
    return _loginUser;
}

-(BOOL)isTourist{
    BOOL rtn;
    if([self.loginUser.sessionId isEqualToString:@"sessionId"]){
        [self showLoginViewController];
        rtn = YES;
    }else{
        rtn = NO;
    }
    return rtn;
}

#pragma mark - 登录
//登录
-(void)loginWithParams:(NSDictionary *)params successBlock:(void(^)(void))successBlock failBlock:(void(^)(NSString *errorMsg))failBlock{
    [[JMRequestManager sharedManager] POST:kUrlLogin parameters:params completion:^(JMBaseResponse *response) {
        if(response.error){
            failBlock(response.errorMsg);
        }else{
            NSString *codeStr = response.responseObject[@"code"];
            if (codeStr.integerValue) {
                JMLoginUserModel *user = [[JMLoginUserModel alloc] initWithLoginDictionary:response.responseObject[@"data"]];
                self.loginUser = user;
                [self resetGTMessage];
                [[WebSocketManager sharedInstance] connect];
                [self updateLoginUserInfoSuccessBlock:^{
                    [self loginTXLive];
                    successBlock();
                } failBlock:failBlock];
            }else{
                NSString *errprMessage = response.responseObject[@"desc"];
                failBlock(errprMessage);
            }
       
        }
    }];
}

-(void)loginTXLive{
    if(self.loginUser && self.loginUser.txUserSig.length > 0){
        MLVBLoginInfo* loginInfo = [MLVBLoginInfo new];
        loginInfo.sdkAppID = 1400228985;
        loginInfo.userID = self.loginUser.userId;
        NSString *name = self.loginUser.nickName.length==0 ? @"" : self.loginUser.nickName;
        loginInfo.userName = name;
        NSString *userAvatar = self.loginUser.headUrl;
        loginInfo.userAvatar = (userAvatar == nil ? @"" : userAvatar);
        loginInfo.userSig = self.loginUser.txUserSig;
        [[MLVBLiveRoom sharedInstance] loginWithInfo:loginInfo completion:^(int errCode, NSString *errMsg) {
            NSLog(@"errCode:%d, errMsg:%@", errCode, errMsg);
            if (errCode == ROOM_SUCCESS) {
                
            }else {
                
            }
        }];
    }else{
        [self getTXUserSig];
    }
}

-(void)getTXUserSig{
    NSMutableDictionary *params = [JMCommonMethod baseRequestParams];
    [[JMRequestManager sharedManager] POST:kUrlTXUserSig parameters:params completion:^(JMBaseResponse *response) {
        if(response.error){
            [JMProgressHelper toastInWindowWithMessage:response.errorMsg];
        }else{
            self.loginUser.txUserSig = [response.responseObject getJsonValue:@"data"];
            [self.loginUser save];
            [self loginTXLive];
        }
    }];
}

-(void)resetGTMessage{
    //传个推的信息给服务器
    NSMutableDictionary *params = [JMCommonMethod baseRequestParams];
    [params setJsonValue:@"1" key:@"mobileType"];
    NSString *clientId = [[NSUserDefaults standardUserDefaults] objectForKey:@"getui_token"];
    [params setJsonValue:clientId key:@"clientId"];
    [[JMRequestManager sharedManager] POST:kUrlGTClientId parameters:params completion:^(JMBaseResponse *response) {
        if(response.error){
            
        }else{
            
        }
    }];
}

//第三方登录
-(void)thirdLoginWithType:(UMSocialPlatformType)type successBlock:(void(^)(void))successBlock failBlock:(void(^)(NSString *errorMsg))failBlock{
    [JMUMengHelper getUserInfoForPlatform:type completion:^(UMSocialUserInfoResponse *result, NSError *error) {
        if(error){
            failBlock(@"授权失败");
            return;
        }
        UMSocialUserInfoResponse *resp = result;
        
        // 第三方登录数据(为空表示平台未提供)
        // 授权数据
        JMLog(@" uid: %@", resp.uid);
        JMLog(@" openid: %@", resp.openid);
        JMLog(@" accessToken: %@", resp.accessToken);
        JMLog(@" refreshToken: %@", resp.refreshToken);
        JMLog(@" expiration: %@", resp.expiration);
        
        // 用户数据
        JMLog(@" name: %@", resp.name);
        JMLog(@" iconurl: %@", resp.iconurl);
        JMLog(@" gender: %@", resp.gender);
        
        // 第三方平台SDK原始数据
        JMLog(@" originalResponse: %@", resp.originalResponse);
        
        //调用自己服务器的授权登录接口
        NSMutableDictionary *params = [JMCommonMethod baseRequestParams];
        [params setJsonValue:resp.name key:@"nick"];
        NSString *requestType;
        NSString *typeStr;
        switch (type) {
            case UMSocialPlatformType_QQ:
                requestType = @"QQ";
                typeStr = @"qqId";
                break;
            case UMSocialPlatformType_WechatSession:
                requestType = @"WeChat";
                typeStr = @"weChatId";
                break;
            case UMSocialPlatformType_Sina:
                requestType = @"Sina";
                typeStr = @"sinaId";
                break;
            default:
                break;
        }
        [params setJsonValue:requestType key:@"loginType"];
        [params setJsonValue:resp.unionId key:@"ids"];
         [params setJsonValue:@"0" key:@"registerType"];
        [[JMRequestManager sharedManager] POST:kUrlLogin parameters:params completion:^(JMBaseResponse *response) {
            if(response.error){
                if(response.statusCode == 3){
                    //初次授权，需要绑定手机号码。此时没有返回登录数据，登录数据在绑定手机接口返回
                    BindPhoneViewController *bindPhoneVC = [[BindPhoneViewController alloc] initWithStoryboardName:@"RegisterAndLogin"];
                    bindPhoneVC.ids = resp.unionId;
                    bindPhoneVC.typeStr = typeStr;
                    bindPhoneVC.completeBlock = ^(JMBaseResponse *bindResponse) {
                        if(bindResponse.error){
                            //绑定手机不成功
                            if(failBlock){
                                failBlock(bindResponse.errorMsg);
                            }
                        }else{
                            //成功
                            JMLoginUserModel *user = [[JMLoginUserModel alloc] initWithLoginDictionary:bindResponse.responseObject[@"data"]];
                            user.nickName = resp.name;
                            user.headUrl = resp.iconurl;
                            self.loginUser = user;
                            [[WebSocketManager sharedInstance] connect];
                            [self loginTXLive];
                            if(successBlock){
                                successBlock();
                            }
                        }
                    };
                    [[UIWindow jm_currentViewController].navigationController pushViewController:bindPhoneVC animated:YES];
                }else{
                    //出错
                    if(failBlock){
                        failBlock(response.errorMsg);
                    }
                }
            }else{
                //非初次授权
                JMLoginUserModel *user = [[JMLoginUserModel alloc] initWithLoginDictionary:response.responseObject[@"data"]];
                user.nickName = resp.name;
                user.headUrl = resp.iconurl;
                self.loginUser = user;
                [[WebSocketManager sharedInstance] connect];
                [self loginTXLive];
                if(successBlock){
                    successBlock();
                }
         
            }
        }];
    }];
}

//登出
-(void)logoutWithSuccessBlock:(void(^)(void))successBlock failBlock:(void(^)(NSString *errorMsg))failBlock{
    if(self.liveVC){
        //如果在直播间，先退出
        [self exitRoom:self.liveVC.roomId];
    }
    NSMutableDictionary *params = [JMCommonMethod baseRequestParams];
    [params setJsonValue:@"0" key:@"registerType"];
    [[JMRequestManager sharedManager] POST:kUrlLogout parameters:params completion:^(JMBaseResponse *response) {
        if(response.error){
            failBlock(response.errorMsg);
        }else{
            [[MLVBLiveRoom sharedInstance] logout];
            [[WebSocketManager sharedInstance] sendLogout];
            self.loginUser = nil;
            [[WebSocketManager sharedInstance] connect];
            [self loginTXLive];
            successBlock();
        }
    }];
}

//获取登录用户详情
-(void)updateLoginUserInfoSuccessBlock:(void(^)(void))successBlock failBlock:(void(^)(NSString *errorMsg))failBlock{
    NSMutableDictionary *params = [JMCommonMethod baseRequestParams];
    [params setJsonValue:self.loginUser.userId key:@"accountId"];
    [[JMRequestManager sharedManager] POST:kUrlLoginUserInfo parameters:params completion:^(JMBaseResponse *response) {
        if(response.error){
            if(failBlock){
                failBlock(response.errorMsg);
            }
        }else{
            [self.loginUser updateWithUserInfoDictionary:response.responseObject[@"data"]];
            [self.loginUser save];
            if(successBlock){
                successBlock();
            }
        }
    }];
}
#pragma mark -
-(void)loadRootVC {
    //TODO 此处还可以添加引导页、广告页
    BOOL showGuide = [GuideViewController isShowGuide];
    if(showGuide){
        //显示引导页
        [self showGuideViewController];
    }else{
        //不显示引导页
        [self loginTXLive];
        [[WebSocketManager sharedInstance] connect];
        [self showMainViewController];
    }
}

-(void)showLoginViewController{
   //判断是否已经显示了登录
    UIViewController *topViewController = [UIApplication sharedApplication].delegate.window.rootViewController;
    if(topViewController.presentedViewController){
        UIViewController *presentVC = topViewController.presentedViewController;
        if([presentVC isKindOfClass:[UINavigationController class]]){
            UINavigationController *presentNav = (UINavigationController *)presentVC;
            UIViewController *rootVC = presentNav.viewControllers.firstObject;
            if([rootVC isKindOfClass:[LoginViewController class]]){
                return;
            }
        }
    }
    LoginViewController *loginVC = [[LoginViewController alloc] initWithStoryboardName:@"RegisterAndLogin"];
    JMNavigationController *nav = [[JMNavigationController alloc] initWithRootViewController:loginVC];
    UIViewController *currVC = [UIWindow jm_currentViewController];
    [currVC presentViewController:nav animated:YES completion:nil];
    
    
    
    
//    [UIApplication sharedApplication].delegate.window.rootViewController = nav;
}

-(void)showMainViewController{
    JMTabBarController *tab = [[JMTabBarController alloc] init];
    [UIApplication sharedApplication].delegate.window.rootViewController = tab;
}

-(void)showGuideViewController{
    GuideViewController *guideVC = [[GuideViewController alloc] initWithStoryboardName:@"RegisterAndLogin"];
    [UIApplication sharedApplication].delegate.window.rootViewController = guideVC;
}
#pragma mark - 版本检测
-(void)versionCheck:(BOOL)showAlert{
    if(self.appVersionTool == nil){
        _appVersionTool = [[JMAppVersionTool alloc] init];
    }
    [self.appVersionTool versionCheck:showAlert];
}

//全屏播放视频
-(void)fullScreenPlayVideo:(NSString *)videoUrl title:(NSString *)title coverImage:(NSString *)imageUrl{
    PlayVideoViewController *playVC = [[PlayVideoViewController alloc] initWithStoryboardName:@"GoodDetail"];
    if(![videoUrl hasPrefix:@"http"]){
        playVC.videoUrl = [ImageBaseUrl stringByAppendingPathComponent:videoUrl];
    }else{
        playVC.videoUrl = videoUrl;
    }
    playVC.title = title;
    playVC.coverImageUrl = [JMCommonMethod pinImagePath:imageUrl];
    [[UIWindow jm_currentViewController] presentViewController:playVC animated:NO completion:nil];
}


#pragma mark - 直播
-(void)enterRoom:(NSString *)roomId{
    UIViewController *currVC = [UIWindow jm_currentViewController];
    //游客判断
    if([[JMProjectManager sharedJMProjectManager] isTourist] == YES){
        return;
    }
    if(self.liveVC){
        if([self.liveVC.roomId isEqualToString:roomId]){
            [self liveLargePlay:self.liveVC.roomId];
        }else{
            //退出原来的直播，进入新的直播
            [self exitRoom:self.liveVC.roomId];
            [self enterRoom:roomId];
        }
    }else{
        LivePlayViewController *livePlayVC = [[LivePlayViewController alloc] initWithStoryboardName:@"LivePlay"];
        livePlayVC.roomId = roomId;
        self.liveVC = livePlayVC;
        JMNavigationController *nav = [[JMNavigationController alloc] initWithRootViewController:livePlayVC];
        [currVC presentViewController:nav animated:YES completion:nil];
    }
}

-(void)exitRoom:(NSString *)roomId{
    if(self.liveVC && [roomId isEqualToString:self.liveVC.roomId]){
        [self.liveVC closeVC];
        self.liveVC = nil;
        [self.smallPlay removeFromSuperview];
        self.smallPlay = nil;
    }
}

-(void)liveSmallPlay:(NSString *)roomId{
    if(self.liveVC && [roomId isEqualToString:self.liveVC.roomId]){
        self.smallPlay = [[LiveSmallPlayView alloc] initWithXib];
        self.smallPlay.roomId = self.liveVC.roomId;
        [self.liveVC dismissViewControllerAnimated:NO completion:^{
            self.smallPlay.videoView = self.liveVC.videoParentView;
        }];
        UIWindow *window = [UIApplication sharedApplication].keyWindow;
        [window addSubview:self.smallPlay];
        
        CGFloat height = 60;
        if (@available(iOS 11.0, *)) {
            height += [[UIApplication sharedApplication] delegate].window.safeAreaInsets.bottom;
        } else {
            // Fallback on earlier versions
        }
        
        [self.smallPlay mas_makeConstraints:^(MASConstraintMaker *make) {
            make.right.equalTo(window.mas_right).offset(-10);
            make.bottom.equalTo(window.mas_bottom).offset(-height);
        }];
    }
}

-(void)liveLargePlay:(NSString *)roomId{
    if(self.liveVC && [roomId isEqualToString:self.liveVC.roomId]){
        UIViewController *currVC = [UIWindow jm_currentViewController];
        [self.liveVC.view insertSubview:self.liveVC.videoParentView atIndex:0];
        [self.liveVC.videoParentView mas_makeConstraints:^(MASConstraintMaker *make) {
            make.edges.equalTo(self.liveVC.view);
        }];
        JMNavigationController *nav = [[JMNavigationController alloc] initWithRootViewController:self.liveVC];
        [currVC presentViewController:nav animated:NO completion:^{
            [self.smallPlay removeFromSuperview];
            self.smallPlay = nil;
        }];
    }
}
@end
