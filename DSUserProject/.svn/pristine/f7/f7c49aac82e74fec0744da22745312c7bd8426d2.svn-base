//
//  LivePlayViewController.m
//  JMBaseProject
//
//  Created by Liuny on 2019/6/17.
//  Copyright © 2019 liuny. All rights reserved.
//

#import "LivePlayViewController.h"
#import "ComplaintViewController.h"
#import "ShareTipView.h"
#import "LiveCommentViewController.h"
#import "TCMsgModel.h"
#import "MLVBLiveRoom.h"
#import "LiveMessageCell.h"

@interface LivePlayViewController ()<UITextFieldDelegate,UITableViewDelegate,UITableViewDataSource,MLVBLiveRoomDelegate>
@property (weak, nonatomic) IBOutlet UIView *videoParentView;
@property (weak, nonatomic) IBOutlet UILabel *titleLabel;
@property (weak, nonatomic) IBOutlet UILabel *onlinePeopleLabel;
@property (weak, nonatomic) IBOutlet UILabel *idLabel;
@property (weak, nonatomic) IBOutlet UITextField *inputContentTF;
@property (weak, nonatomic) IBOutlet UIButton *storeButton;
//赞
@property (weak, nonatomic) IBOutlet UIView *zanNumView;
@property (weak, nonatomic) IBOutlet UILabel *zanNumLabel;
@property (weak, nonatomic) IBOutlet UIButton *zanButton;
//评论
@property (weak, nonatomic) IBOutlet UIView *commentNumView;
@property (weak, nonatomic) IBOutlet UILabel *commentNumLabel;

@property (weak, nonatomic) IBOutlet UIScrollView *scrollView;

@property (weak, nonatomic) IBOutlet UITableView *messageTableView;
@property (strong, nonatomic) NSMutableArray *messageArray;



@property (strong, nonatomic) NSString *playUrl;
@property (nonatomic, retain) MLVBLiveRoom* liveRoom;
@property (assign, nonatomic) BOOL isNotifiedEnterGroup;
@end

@implementation LivePlayViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view.
}

-(void)initControl{
    self.fd_interactivePopDisabled = YES;
    self.view.backgroundColor = kColorMain;
    
    self.zanNumView.layer.cornerRadius = self.zanNumView.mj_h/2.0;
    self.commentNumView.layer.cornerRadius = self.commentNumView.mj_h/2.0;
    
    self.scrollView.contentOffset = CGPointMake(kScreenWidth, 0);
    
    self.messageTableView.dataSource = self;
    self.messageTableView.delegate = self;
    self.messageTableView.rowHeight = UITableViewAutomaticDimension;
    self.messageTableView.estimatedRowHeight = 28.0;
    
    self.inputContentTF.delegate = self;
}

-(void)initData{
    self.isNotifiedEnterGroup = NO;
    self.liveRoom = [MLVBLiveRoom sharedInstance];
    [self.liveRoom setCameraMuteImage:[UIImage imageNamed:@"pause_publish.jpg"]];
    self.liveRoom.delegate = self;
    
    
    [self requestRoomInfo];
}

- (void)startRtmp {
    [[UIApplication sharedApplication] setIdleTimerDisabled:YES];
    if (![self checkPlayUrl:self.playUrl]) {
        return;
    }
    [self initRoomLogic];
}

- (void)stopRtmp {
    if (self.liveRoom) {
        [self.liveRoom exitRoom:^(int errCode, NSString *errMsg) {
            NSLog(@"exitRoom: errCode[%d] errMsg[%@]", errCode, errMsg);
        }];
    }
    [[UIApplication sharedApplication] setIdleTimerDisabled:NO];
}

- (void)initRoomLogic {
    [self.liveRoom enterRoom:self.roomId playUrl:self.playUrl view:self.videoParentView completion:^(int errCode, NSString *errMsg) {
        NSLog(@"enterRoom: errCode[%d] errMsg[%@]", errCode, errMsg);
        dispatch_async(dispatch_get_main_queue(), ^{
            if (errCode == 0) {
                NSLog(@"连接成功");
                [self.liveRoom sendRoomCustomMsg:[@(TCMsgModelType_MemberEnterRoom) stringValue] msg:nil completion:nil];
                self.isNotifiedEnterGroup = YES;
            } else {
                NSLog(@"进入直播间失败");
                [JMProgressHelper toastInWindowWithMessage:[NSString stringWithFormat:@"%@%d", @"进入直播间失败", errCode]];
                [self closeVC];
            }
        });
    }];
}

- (BOOL)checkPlayUrl:(NSString *)playUrl {
    if (!([playUrl hasPrefix:@"http:"] || [playUrl hasPrefix:@"https:"] || [playUrl hasPrefix:@"rtmp:"] )) {
        [JMProgressHelper toastInWindowWithMessage:@"播放地址不合法，目前仅支持rtmp,flv,hls,mp4播放方式!"];
        return NO;
    }
    
    if ([playUrl hasPrefix:@"rtmp:"]) {
        
    } else if (([playUrl hasPrefix:@"https:"] || [playUrl hasPrefix:@"http:"]) && [playUrl rangeOfString:@".flv"].length > 0) {
        
    } else{
        [JMProgressHelper toastInWindowWithMessage:@"播放地址不合法，直播目前仅支持rtmp,flv播放方式!"];
        return NO;
    }

    return YES;
}

- (void)closeVC{
    [self stopRtmp];
    [[NSNotificationCenter defaultCenter] removeObserver:self];
    
    if (self.playUrl) {
        if(self.isNotifiedEnterGroup){
            [self.liveRoom sendRoomCustomMsg:[@(TCMsgModelType_MemberQuitRoom) stringValue] msg:nil completion:nil];
        }
    }
    [self.navigationController dismissViewControllerAnimated:YES completion:nil];
}



#pragma mark - MLVBLiveRoomDelegate
- (void)onDebugLog:(NSString *)msg {
    NSLog(@"onDebugLog:%@", msg);
}

- (void)onRoomDestroy:(NSString *)roomID {
    dispatch_async(dispatch_get_main_queue(), ^{
        NSLog(@"onRoomDestroy, roomID:%@", roomID);
        
    });
}

- (void)onError:(int)errCode errMsg:(NSString *)errMsg extraInfo:(NSDictionary *)extraInfo {
    dispatch_async(dispatch_get_main_queue(), ^{
        NSLog(@"onError:%d, %@", errCode, errMsg);
        if(errCode != 0){
            
        }
    });
}

- (void)onRecvRoomTextMsg:(NSString *)roomID userID:(NSString *)userID userName:(NSString *)userName userAvatar:(NSString *)userAvatar message:(NSString *)message {
    TCMsgModel *msg = [[TCMsgModel alloc] init];
    msg.userId = userID;
    msg.userHeadImageUrl = userAvatar;
    msg.userName = userName;
    msg.msgType = TCMsgModelType_NormalMsg;
    msg.userMsg = message;
    [self handleIMMessage:msg];
}

- (void)onRecvRoomCustomMsg:(NSString *)roomID userID:(NSString *)userID userName:(NSString *)userName userAvatar:(NSString *)userAvatar cmd:(NSString *)cmd message:(NSString *)message {
    TCMsgModel *msg = [[TCMsgModel alloc] init];
    msg.userId = userID;
    msg.userHeadImageUrl = userAvatar;
    msg.userName = userName.length > 0? userName : userID;
    msg.msgType = [cmd integerValue];
    switch (msg.msgType) {
        case TCMsgModelType_MemberEnterRoom:
            msg.userMsg = @"加入直播";
            break;
        case TCMsgModelType_MemberQuitRoom:
            msg.userMsg = @"退出直播";
            break;
        case TCMsgModelType_Praise:
            msg.userMsg  =  @"点了个赞";
            break;
        default:
            break;
    }
    [self handleIMMessage:msg];
}

- (void)handleIMMessage:(TCMsgModel *)msg{
    if(self.messageArray == nil){
        self.messageArray = [[NSMutableArray alloc] init];
    }
    [self.messageArray addObject:msg];
    [self.messageTableView reloadData];
    [self.messageTableView scrollToBottom];
}

#pragma mark - UITextFieldDelegate
- (BOOL)textFieldShouldReturn:(UITextField *)textField{
    [super textFieldShouldReturn:textField];
    NSString *textMsg = [textField.text stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];
    if (textMsg.length <= 0) {
        textField.text = @"";
        [JMProgressHelper toastInWindowWithMessage:@"消息不能为空"];
        return YES;
    }
    
    TCMsgModel *msgModel = [[TCMsgModel alloc] init];
    msgModel.userName = @"我";
    msgModel.userMsg  =  textMsg;
    msgModel.userHeadImageUrl = [JMProjectManager sharedJMProjectManager].loginUser.headUrl;
    msgModel.msgType = TCMsgModelType_NormalMsg;
    [[MLVBLiveRoom sharedInstance] sendRoomTextMsg:textMsg completion:nil];
    
    [self handleIMMessage:msgModel];
    [self.inputContentTF resignFirstResponder];
    return YES;
}

#pragma mark - Navigation
-(BOOL)navUIBaseViewControllerIsNeedNavBar:(JMNavUIBaseViewController *)navUIBaseViewController{
    return NO;
}

#pragma mark - UITableView
-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{
    return self.messageArray.count;
}

-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{
    LiveMessageCell *cell = [tableView dequeueReusableCellWithIdentifier:@"LiveMessageCell"];
    TCMsgModel *msg = self.messageArray[indexPath.row];
    cell.contentLabel.text = msg.userMsg;
    return cell;
}


#pragma mark - Actions

- (IBAction)closeAction:(id)sender {
    //关闭
    [self closeVC];
}

- (IBAction)complaintAction:(id)sender {
    //投诉
    [self goComplaintVC];
}

- (IBAction)shareAction:(id)sender {
    //分享
    ShareTipView *shareTipView = [[ShareTipView alloc] initWithXib];
    [shareTipView showViewWithDoneBlock:^(NSDictionary *params) {
        
    }];
}

- (IBAction)storeAction:(id)sender {
    //收藏、取消收藏
}

- (IBAction)zanAction:(id)sender {
    //点赞
}

- (IBAction)customerServiceAction:(id)sender {
    //客服
}

- (IBAction)commentAction:(id)sender {
    //评论
    LiveCommentViewController *commentVC = [[LiveCommentViewController alloc] initWithStoryboardName:@"LivePlay"];
    //使用这种模式，后面的内容不会隐藏
    commentVC.modalPresentationStyle = UIModalPresentationCustom;
    [self presentViewController:commentVC animated:YES completion:nil];
}

#pragma mark - 跳转
-(void)goComplaintVC{
    ComplaintViewController *complaintVC = [[ComplaintViewController alloc] initWithStoryboardName:@"LivePlay"];
    [self.navigationController pushViewController:complaintVC animated:YES];
}


#pragma mark - 网络
-(void)requestRoomInfo{
    NSMutableDictionary *params = [JMCommonMethod baseRequestParams];
    [params setJsonValue:self.roomId key:@"roomId"];
    [[JMRequestManager sharedManager] POST:kUrlRoomInfo parameters:params completion:^(JMBaseResponse *response) {
        if(response.error){
            [JMProgressHelper toastInWindowWithMessage:response.errorMsg];
        }else{
            NSDictionary *dataDic = response.responseObject[@"data"];
            NSString *playUrl = [dataDic getJsonValue:@"playUrl"];
            if(JMIsEmpty(playUrl) == NO){
                self.playUrl = [playUrl stringByAppendingString:@".flv"];
            }
            [self startRtmp];
        }
    }];
}
@end
