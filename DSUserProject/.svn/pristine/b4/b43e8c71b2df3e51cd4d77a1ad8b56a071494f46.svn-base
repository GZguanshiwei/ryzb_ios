//
//  JMCommonMethod.m
//  JMBaseProject
//
//  Created by Liuny on 2018/8/23.
//  Copyright © 2018年 liuny. All rights reserved.
//

#import "JMCommonMethod.h"

@implementation JMCommonMethod
+(NSMutableAttributedString *)navigationTitleWithColor:(UIColor *)color title:(NSString *)title{
    NSMutableAttributedString *rtn = [[NSMutableAttributedString alloc] initWithString:title];
    UIFont *font = [UIFont boldSystemFontOfSize:19.0];
    [rtn addAttribute:NSFontAttributeName value:font range:NSMakeRange(0, title.length)];
    [rtn addAttribute:NSForegroundColorAttributeName value:color range:NSMakeRange(0, title.length)];
    return rtn;
}
+(void)navigationItemSet:(UIButton *)item fontColor:(UIColor *)color{
    [item setTitleColor:color forState:UIControlStateNormal];
    item.titleLabel.font = [UIFont boldSystemFontOfSize:15.0];
}

+(NSMutableDictionary *)baseRequestParams{
    NSMutableDictionary *rtn = [[NSMutableDictionary alloc] init];
    NSString *sessionId = [JMProjectManager sharedJMProjectManager].loginUser.sessionId;
    [rtn setJsonValue:sessionId key:@"sessionId"];
   
    return rtn;
}

//网络请求图片
+(NSURL *)imageUrlWithPath:(NSString *)imagePath{
    NSURL *rtn;
    if(imagePath.length == 0){
        return rtn;
    }
    if(![imagePath hasPrefix:@"http"]){
        NSString *allPath = [ImageBaseUrl stringByAppendingPathComponent:imagePath];
        rtn = [NSURL URLWithString:allPath];
    }else{
        rtn = [NSURL URLWithString:imagePath];
    }
    return rtn;
}

+(NSString *)pinImagePath:(NSString *)path{
    NSString *rtn;
    if(path.length == 0){
        return @"";
    }
    if(![path hasPrefix:@"http"]){
        NSString *allPath = [ImageBaseUrl stringByAppendingPathComponent:path];
        rtn = allPath;
    }else{
        rtn = path;
    }
    return rtn;
}

+(void)shadowView:(UIView *)view{
    //阴影
    view.layer.shadowColor = [UIColor blackColor].CGColor;
    view.layer.shadowOffset = CGSizeMake(0, 5);
    view.layer.shadowOpacity = 0.04;
    //    view.layer.shadowRadius = 5;
}

+(void)largeImagePreview:(NSArray <NSString *> *)sourceData currentIndex:(NSInteger)index {
    NSMutableArray *browserDataArr = [NSMutableArray array];
    for(NSString *imageStr in sourceData){
        YBImageBrowseCellData *data = [YBImageBrowseCellData new];
        data.url = [NSURL URLWithString:imageStr];
        //        data.thumbUrl =
        [browserDataArr addObject:data];
    }
    YBImageBrowser *browser = [YBImageBrowser new];
    [browser.defaultToolBar hideOperationButton];
    browser.dataSourceArray = browserDataArr;
    browser.currentIndex = index;
    [YBIBCopywriter shareCopywriter].type = YBIBCopywriterTypeSimplifiedChinese;
    [browser show];
}

//替换手机号码
+ (NSString  *)getTelephoneNumWith:(NSString *)phoneStr {
    //获取字符串中的电话号码
    NSString *regulaStr = @"\\d{3,4}[- ]?\\d{7,8}";
    __block  NSString *endStr = phoneStr;
    NSError *error;
    NSRegularExpression *regex = [[NSRegularExpression alloc] initWithPattern:regulaStr options:NSRegularExpressionCaseInsensitive error:&error];
    [regex enumerateMatchesInString:phoneStr options:NSMatchingReportProgress range:NSMakeRange(0, phoneStr.length) usingBlock:^(NSTextCheckingResult * _Nullable result, NSMatchingFlags flags, BOOL * _Nonnull stop) {
        NSString *numStr = [phoneStr substringWithRange:result.range];
        if ([self isPhoneNumber:numStr]) {
            endStr =  [endStr stringByReplacingOccurrencesOfString:numStr withString:@"***********"];
        }
        
    }];
    
    return endStr;
}

//判断字符串是否为手机号
+ (BOOL )isPhoneNumber:(NSString *)str {
    NSString * MOBILE = @"^1(3[0-9]|5[0-35-9]|8[025-9])\\d{8}$";
    NSString * CM = @"^1(34[0-8]|3[5-9]|47|5[0127-9]|8[23478]|98)\\d{8}$";
    NSString * CU = @"^1((3[0-2]|45|5[56]|166|7[56]|8[56]))\\d{8}$";
    NSString * CT = @"^1((33|49|53|7[37]|8[019]|9[19]))\\d{8}$";
    
    NSPredicate *regextestmobile = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", MOBILE];
    NSPredicate *regextestcm = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", CM];
    NSPredicate *regextestcu = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", CU];
    NSPredicate *regextestct = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", CT];
    BOOL res1 = [regextestmobile evaluateWithObject:str];
    BOOL res2 = [regextestcm evaluateWithObject:str];
    BOOL res3 = [regextestcu evaluateWithObject:str];
    BOOL res4 = [regextestct evaluateWithObject:str];
    
    if (res1 || res2 || res3 || res4 ) {
        return YES;
    } else {
        return NO;
    }
}

@end
